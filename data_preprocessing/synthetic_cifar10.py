from pathlib import Path
import numpy as np
from torch.utils.data import Dataset
from torchvision import transforms
import torch

class SyntheticCifar10Dataset(Dataset):
    """
    Synthetic CIFAR-10 dataset. Images are generated by passing through each image in the
    original CIFAR-10 dataset through a variational autoencoder.
    """

    MEAN = torch.tensor((0.4967, 0.5034, 0.5112))
    STD = torch.tensor((0.2336, 0.2314, 0.2573))

    NRM = transforms.Normalize(MEAN, STD)
    INV_NRM = transforms.Normalize(-MEAN/STD, 1/STD)

    # Transforms object for testset with NO augmentation
    TRANSFORM_NO_AUG = transforms.Compose([NRM])


    def __init__(self, root, n_images):
        super().__init__()
        self.root_pth = Path(root)
        #self.image_pths = list(self.root_pth.glob('image_*.npy'))
        #self.image_idxs = [int(pth.stem.split('_')[1]) for pth in self.image_pths]
        self.image_idxs = list(range(n_images))

    def __len__(self):
        return len(self.image_idxs)

    def __getitem__(self, idx):
        image = np.load(self.root_pth / f'image_{self.image_idxs[idx]}.npy')
        image = torch.from_numpy(image).float()
        image = self.TRANSFORM_NO_AUG(image)

        with open(self.root_pth / 'label_{}.txt'.format(self.image_idxs[idx]), 'r') as f:
            label = int(f.read())
        return image, label

    
    @staticmethod
    def denormalize(img):
        """
        Denormalizes a tensor image
        """
        return SyntheticCifar10Dataset.INV_NRM(img)
